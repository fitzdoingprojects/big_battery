C51 COMPILER V9.53.0.0   BIG_BATTERY_MAIN                                                  12/11/2018 20:48:59 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE BIG_BATTERY_MAIN
OBJECT MODULE PLACED IN .\src/big_battery_main.OBJ
COMPILER INVOKED BY: Z:\home\fitz\Downloads\SimplicityStudio_v4\developer\toolchains\keil_8051\9.53\BIN\C51.exe /media/f
                    -itz/data/dropbox/projects/ee/big_battery/firmware/big_battery/src/big_battery_main.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(L
                    -ARGE) WARNINGLEVEL(2) FLOATFUZZY(3) OPTIMIZE(8,SIZE) INTVECTOR(0X0000) INTPROMOTE INCDIR(/media/fitz/data/dropbox/projec
                    -ts/ee/big_battery/firmware/big_battery/inc;/home/fitz/Downloads/SimplicityStudio_v4/developer/sdks/8051/v4.1.5//Device/s
                    -hared/si8051Base;/home/fitz/Downloads/SimplicityStudio_v4/developer/sdks/8051/v4.1.5//Device/EFM8BB1/inc) PRINT(.\src/bi
                    -g_battery_main.lst) COND PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.\src/big_battery_main.OBJ)

line level    source

   1          //=========================================================
   2          // src/big_battery_main.c: generated by Hardware Configurator
   3          //
   4          // This file will be updated when saving a document.
   5          // leave the sections inside the "$[...]" comment tags alone
   6          // or they will be overwritten!!
   7          //=========================================================
   8          
   9          //-----------------------------------------------------------------------------
  10          // Includes
  11          //-----------------------------------------------------------------------------
  12          #include <SI_EFM8BB1_Register_Enums.h>                  // SFR declarations
  13          #include "InitDevice.h"
  14          // $[Generated Includes]
  15          // [Generated Includes]$
  16          
  17          
  18          
  19          //-----------------------------------------------------------------------------
  20          // Global CONSTANTS
  21          //-----------------------------------------------------------------------------
  22          SI_SBIT(TRICKLE_DIS, SFR_P0, 2);               // P0.2 Trickle Disable
  23          SI_SBIT(OUTPUT_EN, SFR_P0, 7);               // P0.7 Output Enable
  24          
  25          
  26          //-----------------------------------------------------------------------------
  27          // Externs
  28          //-----------------------------------------------------------------------------
  29          extern uint8_t TX_BUFFER[UART_BUFFERSIZE];
  30          extern uint8_t RX_BUFFER[UART_BUFFERSIZE];
  31          extern uint8_t TX_index;
  32          extern uint8_t TX_size;
  33          extern uint8_t RX_size;
  34          extern uint8_t UART_Output_First;
  35          extern uint8_t TX_Ready;
  36          extern uint8_t Byte;
  37          
  38          void uart_write(char * buf);
  39          void set_pwm0(uint16_t duty);
  40          
  41          //-----------------------------------------------------------------------------
  42          // SiLabs_Startup() Routine
  43          // ----------------------------------------------------------------------------
  44          // This function is called immediately after reset, before the initialization
  45          // code is run in SILABS_STARTUP.A51 (which runs before main() ). This is a
  46          // useful place to disable the watchdog timer, which is enable by default
  47          // and may trigger before main() in some instances.
  48          //-----------------------------------------------------------------------------
  49          void SiLabs_Startup (void)
  50          {
  51   1        // $[SiLabs Startup]
C51 COMPILER V9.53.0.0   BIG_BATTERY_MAIN                                                  12/11/2018 20:48:59 PAGE 2   

  52   1        // [SiLabs Startup]$
  53   1      }
  54          
  55          //-----------------------------------------------------------------------------
  56          // main() Routine
  57          // ----------------------------------------------------------------------------
  58          int main (void) {
  59   1              // Call hardware initialization routine
  60   1              uint16_t duty = 0;
  61   1              enter_DefaultMode_from_RESET();
  62   1      
  63   1              TRICKLE_DIS = 1;
  64   1              OUTPUT_EN = 1;
  65   1      
  66   1              while(1) {
  67   2              // $[Generated Run-time code]
  68   2              // [Generated Run-time code]$
  69   2                      uart_write("this is a test");
  70   2                      while(!TX_Ready);
  71   2                      set_pwm0(duty);
  72   2                      if(duty < 2048) {
  73   3                              duty++;
  74   3                      } else {
  75   3                              duty = 0;
  76   3                      }
  77   2                      if(duty % 10 == 0) {
  78   3                              TRICKLE_DIS = ~TRICKLE_DIS;
  79   3                              OUTPUT_EN = ~OUTPUT_EN;
  80   3      
  81   3                      }
  82   2              }
  83   1      }
  84          
  85          
  86          void uart_write(char * buf) {
  87   1              TX_Ready = 0;
  88   1              TX_size = 0;
  89   1              while((buf[TX_size] != '\n') && (TX_size < UART_BUFFERSIZE)) {
  90   2                      TX_BUFFER[TX_size] = buf[TX_size];
  91   2                      TX_size++;
  92   2              }
  93   1              SBUF0 = TX_BUFFER[0];
  94   1      }
  95          
  96          void set_pwm0(uint16_t duty) {
  97   1         PCA0PWM |= 0x80;                    // Target Auto-reload registers
  98   1      
  99   1         PCA0CPL0 = (duty & 0x00FF);
 100   1         PCA0CPH0 = (duty & 0xFF00)>>8;
 101   1      
 102   1         PCA0PWM &= ~0x80;                   // Target PCA0CPH/L registers
 103   1      }
 104          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    142    ----
   CONSTANT SIZE    =     15    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       5
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
C51 COMPILER V9.53.0.0   BIG_BATTERY_MAIN                                                  12/11/2018 20:48:59 PAGE 3   

   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
